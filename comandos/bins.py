from telegram import Update
from telegram.ext import ContextTypes
import requests
import json

async def bin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para verificar informaci√≥n de BIN de tarjetas"""
    
    if not context.args:
        await update.message.reply_text("‚ùå Debes proporcionar un BIN. Ejemplo: /bin 123456")  # ‚úÖ AWAIT
        return
    
    bin_input = context.args[0].strip()
    
    if not bin_input.isdigit() or len(bin_input) < 6:
        await update.message.reply_text("‚ùå El BIN debe ser num√©rico y tener al menos 6 d√≠gitos.")  # ‚úÖ AWAIT
        return
    
    try:
        response = requests.get(f"https://data.handyapi.com/bin/{bin_input}")
        response.raise_for_status()
        api_data = response.json()

        if api_data.get("Status") == "SUCCESS":
            pais = api_data["Country"]["Name"]
            marca = api_data["Scheme"]
            tipo = api_data["Type"]
            nivel = api_data["CardTier"]
            banco = api_data["Issuer"]

            respuesta = f"""
üí≥ *Informaci√≥n del BIN*: `{bin_input}`
‚Ä¢ üè¶ *Banco*: {banco}
‚Ä¢ üåé *Pa√≠s*: {pais}
‚Ä¢ üè∑Ô∏è *Marca*: {marca}
‚Ä¢ üîß *Tipo*: {tipo}
‚Ä¢ ‚≠ê *Nivel*: {nivel}
            """
            
            await update.message.reply_text(respuesta, parse_mode='Markdown')  # ‚úÖ AWAIT
            
        else:
            await update.message.reply_text("‚ùå BIN no v√°lido o no encontrado.")  # ‚úÖ AWAIT

    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"‚ùå Error de conexi√≥n: {str(e)}")  # ‚úÖ AWAIT
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå Error al procesar la respuesta del servidor.")  # ‚úÖ AWAIT
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error inesperado: {str(e)}")  # ‚úÖ AWAIT